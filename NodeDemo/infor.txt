/**
 * Created by Administrator on 2016/09/18.
 */
/*
全局对象 global
 使用var 定义变量 避免引入全局变量污染命名空间

 */
1. process
  1.1.  process.argv 是命令行参数数组，第一个元素是node，第二个元素是脚本文件名，从第三个参数开始 每个元素是一个运行参数
 console.log(process.argv)
    命令行：
        node argv.js 1991 name=byvoid --v "Carbo Kuo"
        [   'node',
            '/home/byvoid/argv.js',
            '1991',
            'name=byvoid',
            '--v',
            'Carbo Kuo'
        ]
  1.2. process.stdout 是标准的输出流，通常使用的console.log（）向标准的输出打印字符，而process.stdout.write()提供了更底层的接口
  1.3. process.stdin 是标准的输入流，初始时它是被暂停的，要想从标准的输入流读取数据，必须恢复流，并手动编写流的时间响应函数
        process.stdin.resume();
        process.stdin.on('data', function(data) {
            process.stdin.write('read from console: ' + data.toString());
        });
  1.4. process.nextTick(callback) 为事件循环设置一项任务，Node.js会在下次的时间循环响应是调用callback
     Node.js适合I/O密集型的应用，而不是计算密集型的应用。一个Node.js进程只有一个线程，如果当前事件占用大量的CPU时间，执行事件循环的下一个
     事件就需要等待很久，因此Node.js的编程原则就是尽量缩短每个事件的执行时间。
        function doSomething(args, callback) {
            somethingComplicated(args);   ----耗时操作1
            callback();
        }

        doSomething(function onEnd(){
            compute();                   --耗时操作2
        });

        --执行顺序： 调用doSomething() 先执行 somethingComplicated(args) 然后回调 在onEnd()中执行compute()
        使用process.nextTick()改写后,耗时的操作会拆分成两个事件，减少每个事件的执行时间，提高响应速度
        function doSomething(args, callback) {
            somethingComplicated(args);
            process.nextTick(callback);
        }

         doSomething(function onEnd(){
                    compute();                   --耗时操作2
              });
2.console
    向标准输出流（stdout）和标准错误流（stderr）输出字符
    console.log('hello');
    console.log('byvoid%diovyd');        ---------  byvoid%diovyd
    console.log('byvoid%diovyd',1991);       -----------  byvoid1991diovyd'

    console.error() 同 console.log()
    console.trace()  向标准错误流输出当前的调用栈

3.util
    3.1 util.inherits(constructor, superConstructor)  实现对象间的原型继承

    EG:
    var util = require('util');
    function Base() {
        this.name = 'base';
        this.base = 1991;

        this.sayHello = function() {
            console.log('Hello ' + this.name);
        };
    }
    Base.prototype.showName = function() {
        console.log(this.name);
    };

    function Sub() {
        this.name = 'sub';
    }

    util.inherits(Sub, Base);

    var objBase = new Base();
    objBase.showName();
    objBase.sayHello();
    console.log(objBase);

    var objSub = new Sub();
    objSub.showName();
   // objSub.sayHello();
    console.log(objSub );

输出结果：
    base
    Hello base
    Base { name: 'base', base: 1991, sayHello: [Function] }
    sub
    Sub { name: 'sub' }
  ** sub 仅仅继承了Base在原型中定义的函数，而在Base构造函数内部创建的base属性和sayHello函数都没有继承。同时在原型中定义
  的属性不会被console.log作为对象输出。 去掉objSub.sayHello()的注释会发生错误
  3.2 util.inspect(object, [showHidden],[depth],[colors]) 将任意的对象转换为字符串，通常用于调试和错误输出
  showHidden 可选 true: 输出更多隐藏信息
  depth 最大递归层数 默认2层 null：不限递归层数完整遍历
  color true：ANSI颜色编码

  EG:
  var util = require('util');
  function Person() {
    this.name = 'jack';

    this.toString = function() {
        return this.name;
    };

  }
  var obj = new Person();
  console.log(util.inspect(obj));
  console.log(util.inspect(obj,true));
调试结果：
    Person { name: 'jack', toString: [Function] }
    Person {
      name: 'jack',
      toString:
       { [Function]
         [length]: 0,
         [name]: '',
         [arguments]: null,
         [caller]: null,
         [prototype]: { [constructor]: [Circular] } } }

     类型测试工具： util.isArray(),util.isRegExp(),util.isDate(),util.isError()

4. 事件驱动events
    events.EventEmitter  事件发射与事件监听器功能的封装
    每个事件，EventEmitter支持多个事件监听器，当事件发生时，监听器依次调用，事件参数作为回调函数参数传递
    EG:
    var events = require('events');
    var emitter = new events.EventEmitter();
    emitter.on('someEvent', function(arg1, arg2) {   //注册监听
        console.log('listener1', arg1, arg2);
    });
    emitter.on('someEvent',function(arg1, arg2) {
        console.log('listener2', arg1, arg2);
    });
    emitter.emit('someEvent', 'byvoid', 1991);     //发射事件

    测试结果：
    listener1 byvoid 1991
    listener2 byvoid 1991

    4.1 EventEmitter.on(event, listener) 为指定事件注册监听器，接受一个字符串event和一个回调函数listener
    4.2 EventEmitter.emit(event, [arg1], [arg2], [...]) 发射event事件，传递若干可选参数到事件监听器的参数表
    4.3 EventEmitter.once(event, listener) 注册单次监听器，最多只触发一次 触发后立即解除
    4.4 EventEmitter.removeListener(event, listener) 一处监听器，监听器必须存在
    4.5 EventEmitter.removeAllListener([event])

5 error 事件
    EventEmitter 的特殊事件。当error被发射时，EventEmitter规定如果没有响应的监听器，Node.js会把它当做异常处理，退出程序
    并打印调用栈，一般要为发射error的事件对象设置监听器，避免遇到错误后整个程序崩溃

    EG:
    var events = require('events');
    var emitter = new events.EventEmitter();
    emitter.emit('error');

*> 继承EventEmitter 1.具有某个实体功能的对象实现事件符合语义 事件的监听和发射应该是一个对象方法
                    2.其次 javaScript 的对象机制是基于原型的  支持部分多重继承 继承EventEmitter不会打乱对象原有的继承关系

6 文件系统fs
    fs模块所有的方法都提供了异步和同步的
    6.1 fs.readFile(filename, [encoding], [callback(err, data)])
    filename : 文件名
    encoding : 文件的字符编码  不指定：Buffer 形式表示的二进制数据
    callback : 回调函数 用于接收文件的内容
    EG:
    var fs = require('fs');
    fs.readFile('content.txt', function(err,data) {
        if(err) {
            console.log(err);
        } else {
            console.log(data);
        }
    });
    调试结果： <Buffer 0d 0a 0d 0a 49 20 20 6c 6f 76 65 20 20 79 6f 75 21>
    EG:
     var fs = require('fs');
        fs.readFile('content.txt', 'utf-8', function(err,data) {
            if(err) {
                console.log(err);
            } else {
                console.log(data);
            }
        });
    调试结果：I  love  you!

    6.2 fs.readFileSync(filename, [encoding]) 同步版本   读取到的内容以函数返回值的形式返回  错误抛出异常
    6.3 fs.open
        fs.open(path, flags, [mode], [callback(err, fd)])  POSIX open的封装
        path : 文件路径
        flags :
            r : 以读取模式打开文件
            r+ ： 以读写模式打开文件
            w ：以写入模式打开文件，如果文件不存在则创建
            w+ ：以读写模式打开，不存在创建
            a ： 以追加模式打开，不存在创建
            a+ ： 以读取追加模式打开，不存在创建
        mode : 创建文件时给文件指定权限 默认是 0666 （
            遵照POSIX系统中文件的读取和访问权限的规范 通常用八进制数表示
            如： 0754  文件 所有者的权限是7(读、写、执行)  同组的用户权限是5(读、执行) 其他用户权限是4(读)
                字符表示 -rwxr-xr--
        ）
        回调函数会传递一个文件描述符fd (文件描述符是一个非负数，表示操作系统内核为当前进程所维护的打开文件的记录表的索引)
    6.4 fs.read
        fs.read(fd, buffer, offset, length, position, [callback(err, bytesRead, buffer)])  需要手动管理缓冲区和文件指针

7 HTTP 服务器与客户端
    http.Server
    EG:
    var http = require('http');
    http.createServer(function(req, res) {    //创建一个http.Server  实例 将一个函数作为HTTP请求处理函数
        res.writeHead(200, {'Content-Type' : 'text/html'});  //响应代码200 响应成功
        res.write('<h1>Node.js</h1>');
        res.end('<p>Hello　World</p>');      //结束并发送
    }).listen(3000);                         //起动服务并监听3000端口
    console.log('HTTP server is listening at port 3000');

7.1 http.Server 事件
    request : 当客户端请求到来时，该事件被触发，提供两个参数 req 和res, 分别是http.ServerRequest 和 http.ServerResponse的实例，表示请求和响应信息
    connection : 当TCP连接建立时，事件被触发，提供一个参数socket，是net.socket的实例，connection的粒度要大于request，因为客户端在Keep-Alive模式下可能会
        在同一个链接内发送多次请求
    close ： 当服务器关闭时，事件触发，注意不是在客户断开连接时

    http.createServer([requestListener])  建立一个http服务器并将requestListener 作为事件的监听函数，
    EG:
    var http = require('http');
    var server = new http.Server();
    server.on('request', function(req, res) {
        res.writeHead(200, {'Content-Type' : 'text/html'});
        res.write('<h1>Node.js</h1>');
        res.end('<p>Hello　World</p>');
    });
    server.listen(3000);
    console.log('HTTP server is listening at port 3000');
7.2 http.ServerRequest
    HTTP请求信息，一般由http.server 的request事件发送，作为第一个参数传递，通常简称req，
    HTTP请求：请求头  请求体
    http.ServerRequest 提供了一下3个事件用于控制请求体的传输
    data : 当请求体的数据到来时，该事件被触发。该事件提供一个参数chunk，表示接受的数据。该事件没有被监听，请求体会被抛弃
    end ： 当请求体数据传输完成是被触发，以后不会再有数据到来
    close ： 用户请求结束 触发，不同于end 如果用户强制终止传输，还是调用close
7.3 获取GET请求的内容
    Node.js 的url模块的parse函数提供了 解析get请求url  的？ 后面的请求内容
    EG:
    var http = require('http');
    var url = require('url');
    var util = require('util');
    http.createServer(function(req, res) {
        res.write(200, {'Content-Type' : 'text/html'});
        res.end(util.inspect(url.parse(req, url, true)));
    }).listen(3000);
    URL ： http://localhost:3000/user?name=byvoid&email=bybvoid@byvoid.com
    调试结果：
    Url { protocol: null,
          slashes: null,
          auth: null,
          host: null,
          port: null,
          hostname: null,
          hash: null,
          search: '?name=byvoid&email=bybvoid@byvoid.com',
          query: { name: 'byvoid',
                   email: 'bybvoid@byvoid.com'
                   },
          pathname: '/user',
          path: '/user?name=byvoid&email=bybvoid@byvoid.com',
          href: '/user?name=byvoid&email=bybvoid@byvoid.com'
     }

7.4 获取POST请求内容
    POST请求内容在请求体中 Node.js默认不解析

    EG:
    var http = require('http');
    var querystring = require('querystring');
    var util = require('util');
    http.createServer(function(req, res) {
        var post = '';         //定义post 用于在闭包中暂存请求体信息， 通过req的data监听，每当接受到请求体的数据，就累加到post中
        req.on('data', function(chunk) {
            post += chunk;
        });
        req.on('end', function() {        //在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式  然后返回
            post = querystring.parse(post);
            res.end(util.inspect(post));
        });
    }).listen(3000);

    测试 ： ？？？？

7.5 http.ServerResponse
    返回给用户的信息，决定了用户能看到的结果
    三个重要的成员函数：
    response.writeHead(statusCode, [headers]);  一个请求只能调用一次，不调用自动生成
    response.write(data, [encoding]);  data 是buffer或字符串，字符串要指定编码。可以多次调用
    response.end([data], [encoding]);  必须被调用一次

7.6 HTTP 客户端
    http.request 和 http.get  作为客户端向http服务器发起请求
    http.request(option, callback) 发起请求，option是一个类似关联数组的对象，表示请求参数
    option常用的参数如下：
    host ： 域名 或IP
    port ：端口  默认80
    method ： 请求方法 默认 GET
    path : 请求路径  相对于根目录 默认 '/' QueryString 应该包含在其中。例如： /search?query=byvoid
    headers : 一个关联数组对象，为请求头的内容
    callback 传递一个参数，为http.ClientResponse的实例
    http.request 返回一个http.ClientRequest的实例
    EG:
    var http = require('http');
    var querystring = require('querystring');

    var contents = querystring.stringify({
        name : 'byvoid',
        email : 'byvoid@byvoid.com',
        address : 'Zijing 2#, Tsinghuo University',
    });

    var options = {
        host : 'http://localhost',
        path : '/application/post.php',
        method : 'POST',
        headers : {
            'Content-Type' : 'application/x-www-form-urlencoded',
            'Content-Length' : contents.length
        }
    };

    var req = http.request(options, function(res) {
        res.setEncoding('utf8');
        res.on('data', function(data) {
            console.log(data);
        })
    });

    req.write(contents);
    req.end();
    调试结果：   ??????????
    <html>
    <head><title>301 Moved Permanently</title></head>
    <body bgcolor="white">
    <center><h1>301 Moved Permanently</h1></center>
    <hr><center>nginx/1.6.2 (Ubuntu)</center>
    </body>
    </html>

    7.6.1 http.get(options, callback) http.request的简化版
    自动将请求方法设置为get  并且不需要手动调用 req.end();
    EG:
    var http = require('http');
    http.get(
         {host : 'www.byvoid.com'},
         function(res){
            res.setEncoding('utf-8');
            res.on('data', function(data) {
                console.log(data);
            });

    });
    调试结果：
    <html>
    <head><title>301 Moved Permanently</title></head>
    <body bgcolor="white">
    <center><h1>301 Moved Permanently</h1></center>
    <hr><center>nginx/1.6.2 (Ubuntu)</center>
    </body>
    </html>

    1.http.ClientRequest 是http.request或http.get返回产生的对象，表示一个已经产生而且正在运行的HTTP请求
    它提供了一个response事件，即http.request或http.get 第二个参数指定的回调函数的绑定对象

    EG: 显示绑定事件的监听
    var http = require('http');
    var req = http.get({host : 'www.byvoid.com'});
    req.on('response', function(res) {
        res.setEncoding('utf8');
        res.on('data', function(data) {
            console.log(data);
        })
    });
    http.ClientRequest 和http.ServerResponse一样，提供了write和end函数，用于向服务器发送请求体，通常用于POST 、PUT等操作
    所有写结束以后必须end，否则无效
    request.abort() : 终止正在发送的请求
    request.setTimeout(timeout, [callback]) timeout 单位： 毫秒
    2. http.ClientRespose 和http.ServerRequest 相似
    data 、 end、close
    http.ClientResponse提供的几个特殊函数
    response.setEncoding([encoding]) 当data事件被触发时，以encoding编码，默认null，不编码，buffer的形式常用utf8
    resposne.pause() 暂停接收和发送事件  方便实现下载功能
    resposne.resumn() 从暂停的状态中恢复


